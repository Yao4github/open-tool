# .github/workflows/check-renew-ssl.yml
#
# 自动化 SSL 证书检查与续签工作流 (V11 - 最终版)
# - 并行矩阵，配置极简，智能检测。
# - 重载逻辑更新：检测所有支持的服务 (docker-nginx/nginx/apache/gost) 并全部重载。
# ==============================================================================

name: 'CertGuard: Check & Renew SSL Certificates (Auto-Adaptive)'

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry-Run: 只检查不续签 (true/false)'
        required: true
        default: 'false'
        type: boolean
      renew_threshold_days:
        description: '续签阈值 (天)'
        required: true
        default: '10'
        type: string

jobs:
  prepare-matrix:
    name: 'Prepare Matrix from Secrets'
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.set-matrix.outputs.hosts }}
    steps:
      - name: 'Generate Matrix from SSH_HOSTS Secret'
        id: set-matrix
        env:
          SSH_HOSTS: ${{ secrets.SSH_HOSTS }}
        run: echo "hosts=$(echo "$SSH_HOSTS" | jq -cR 'split(",")')" >> "$GITHUB_OUTPUT"

  check-and-renew:
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.prepare-matrix.outputs.hosts) }}

    name: 'Check SSL on ${{ matrix.host }}'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Step 1: Print Job Information'
        run: |
          echo "🚀 Starting SSL certificate check for server: ${{ matrix.host }}"
          echo "⏰ Triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🔧 Dry-Run Mode: ${{ inputs.dry_run }}"
            echo "⏳ Renewal Threshold: ${{ inputs.renew_threshold_days }} days"
          else
            echo "⏳ Renewal Threshold: 10 days (default)"
          fi

      - name: 'Step 2: Execute Smart Renewal Script via ssh-action'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ matrix.host }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cat > /tmp/remote_check_and_renew.sh << 'EOF'
            ${{ env.REMOTE_SCRIPT }}
            EOF
            
            chmod +x /tmp/remote_check_and_renew.sh
            /tmp/remote_check_and_renew.sh

        env:
          RENEW_THRESHOLD_DAYS: ${{ github.event.inputs.renew_threshold_days || '10' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
          REMOTE_SCRIPT: |
            #!/bin/bash
            set -euo pipefail

            # --- Configuration ---
            RENEW_THRESHOLD_DAYS="${RENEW_THRESHOLD_DAYS:-10}"
            DRY_RUN="${DRY_RUN:-false}"
            CERT_SCAN_PATH="/etc/letsencrypt/live"

            # --- Helper Functions ---
            log() { echo -e "[\033[0;32mINFO\033[0m] $(date '+%Y-%m-%d %H:%M:%S') - $1"; }
            warn() { echo -e "[\033[0;33mWARN\033[0m] $(date '+%Y-%m-%d %H:%M:%S') - $1"; }
            error() { echo -e "[\033[0;31mERROR\033[0m] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2; exit 1; }

            # --- Auto-detection Logic ---
            RENEW_CMD=""
            if command -v certbot &> /dev/null; then
              log "检测到 certbot，将使用 certbot 进行续签。"
              RENEW_CMD="sudo certbot renew --quiet"
            elif [ -f "$HOME/.acme.sh/acme.sh" ]; then
              log "检测到 acme.sh，将使用 acme.sh 进行续签。"
              RENEW_CMD="\"$HOME/.acme.sh/acme.sh\" --renew-all --quiet"
            else
              error "未检测到 certbot 或 acme.sh，无法执行续签。"
            fi

            RELOAD_CMDS=""
            if command -v docker &> /dev/null && docker ps --filter "name=nginx" --format "{{.ID}}" | grep -q .; then
              nginx_container=$(docker ps -q --filter "name=nginx" | head -n 1)
              log "检测到名为 'nginx' 的 Docker 容器 (ID: $nginx_container)，添加重载命令。"
              RELOAD_CMDS+="docker exec ${nginx_container} nginx -s reload;"
            fi
            if systemctl list-units --type=service --state=running | grep -q 'nginx.service'; then
              log "检测到运行中的 nginx.service，添加重载命令。"
              RELOAD_CMDS+="sudo systemctl reload nginx;"
            fi
            if systemctl list-units --type=service --state=running | grep -q 'apache2.service'; then
              log "检测到运行中的 apache2.service，添加重载命令。"
              RELOAD_CMDS+="sudo systemctl reload apache2;"
            elif systemctl list-units --type=service --state=running | grep -q 'httpd.service'; then
              log "检测到运行中的 httpd.service，添加重载命令。"
              RELOAD_CMDS+="sudo systemctl reload httpd;"
            fi
            if systemctl list-units --type=service --state=running | grep -q 'gost.service'; then
              log "检测到运行中的 gost.service，添加重载命令。"
              RELOAD_CMDS+="sudo systemctl reload gost;"
            fi

            if [ -z "${RELOAD_CMDS}" ]; then
              error "未检测到任何支持的服务 (Docker Nginx, Nginx, Apache, Gost)，无法执行重载。"
            fi

            # --- Core Logic ---
            get_remaining_days_from_file() {
              local cert_file="$1"
              local expiry_date_str
              expiry_date_str=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
              if [[ -z "$expiry_date_str" ]]; then echo "0"; return; fi
              local expiry_epoch
              expiry_epoch=$(date --date="$expiry_date_str" +%s)
              local current_epoch
              current_epoch=$(date +%s)
              echo $(( (expiry_epoch - current_epoch) / 86400 ))
            }

            log "启动全盘扫描模式 (路径: $CERT_SCAN_PATH)"
            if ! [ -d "$CERT_SCAN_PATH" ]; then error "证书扫描路径 '$CERT_SCAN_PATH' 不存在或不是一个目录。"; fi

            local min_remaining_days=9999
            local soonest_expiring_cert_file=""
            local soonest_expiring_domain=""
            
            local cert_files
            cert_files=$(find "$CERT_SCAN_PATH" -type f -name "fullchain.pem")
            if [[ -z "$cert_files" ]]; then
              log "在 '$CERT_SCAN_PATH' 下未找到任何 'fullchain.pem' 文件。任务正常结束。"
              exit 0
            fi

            while read -r cert_file; do
                local domain_name
                domain_name=$(basename "$(dirname "$cert_file")")
                local current_days
                current_days=$(get_remaining_days_from_file "$cert_file")
                if [[ "$current_days" -eq 0 ]]; then
                    warn "无法读取证书 '$domain_name' ($cert_file) 的有效期，已跳过。"
                    continue
                fi
                log "检测到域名: '$domain_name', 剩余 $current_days 天。"
                if (( current_days < min_remaining_days )); then
                    min_remaining_days=$current_days
                    soonest_expiring_cert_file="$cert_file"
                    soonest_expiring_domain="$domain_name"
                fi
            done <<< "$cert_files"

            if [[ "$min_remaining_days" -eq 9999 ]]; then error "扫描完成，但未能成功解析任何证书的有效期。"; fi

            log "扫描完成。最快过期的域名是 '$soonest_expiring_domain'，剩余 $min_remaining_days 天。"
            if [[ "$min_remaining_days" -lt "$RENEW_THRESHOLD_DAYS" ]]; then
              warn "存在证书剩余有效期小于 $RENEW_THRESHOLD_DAYS 天，需要触发全局续签。"
              if [[ "$DRY_RUN" == "true" ]]; then
                log "Dry-Run 模式：跳过实际续签和重载操作。"
                exit 0
              fi
              log "正在执行续签命令: $RENEW_CMD"
              if ! eval "$RENEW_CMD"; then error "证书续签失败！请检查续签命令和相关日志。"; fi
              log "证书续签命令执行成功。"
              log "正在执行重载命令..."
              if ! eval "$RELOAD_CMDS"; then error "服务重载失败！请检查相关日志。"; fi
              log "所有检测到的服务均已重载。"
              log "等待几秒后进行二次校验..."
              sleep 5
              local new_remaining_days
              new_remaining_days=$(get_remaining_days_from_file "$soonest_expiring_cert_file")
              log "续签后 '$soonest_expiring_domain' 剩余有效期: $new_remaining_days 天"
              if [[ "$new_remaining_days" -gt "$min_remaining_days" ]]; then
                log "\033[0;32m✅ 续签成功！证书有效期已延长。\033[0m"
              else
                error "二次校验失败！续签后证书有效期未延长。请立即手动检查！"
              fi
            else
              log "\033[0;32m✅ 所有证书有效期正常，无需续签。\033[0m"
            fi
            exit 0
